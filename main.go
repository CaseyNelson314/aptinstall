package main

import (
	"fmt"
	"os"
	"time"

	"golang.org/x/term"
)

func main() {
	fmt.Print("Reading package list... ")
	time.Sleep(time.Millisecond * 200)
	fmt.Println("apt.")
	time.Sleep(time.Millisecond * 100)

	fmt.Print("Building dependency tree... ")
	time.Sleep(time.Millisecond * 100)
	fmt.Println("apt.")
	time.Sleep(time.Millisecond * 200)

	fmt.Print("Reading state information... ")
	time.Sleep(time.Millisecond * 300)
	fmt.Println("apt.")
	time.Sleep(time.Millisecond * 800)

	fmt.Print("Receiving objects... ")
	time.Sleep(time.Millisecond * 1000)
	fmt.Println("apt.")
	time.Sleep(time.Millisecond * 1000)

	isFirst := true
	fmt.Print("{ ")
	for i := 0; i < 200; i++ {
		if isFirst {
			isFirst = false
		} else {
			fmt.Print(", ")
		}
		fmt.Print("あー")
		time.Sleep(time.Millisecond)
		fmt.Print("ぱ")
		time.Sleep(time.Millisecond)
		fmt.Print("つ ")
		time.Sleep(time.Millisecond)
		fmt.Print("あ")
		time.Sleep(time.Millisecond)
		fmt.Print("ぱ")
		time.Sleep(time.Millisecond)
		fmt.Print("つ")
		time.Sleep(time.Millisecond)
	}
	fmt.Println(" }")

	// gen by https://webtools-oasis.com/ascii-art-generator
	apt := []string{
		`⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂`,
		`⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⣀⣀⣀⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⣀⣀⣀⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂`,
		`⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⣶⣦⡄⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⢀⣀⠂⠂⣰⣿⠟⠛⢻⣿⡄⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⣴⣦⡄⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⣀⣀⠂⠂⣴⡿⠟⠛⢿⣷⡀⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂`,
		`⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⣿⣿⠁⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⢸⣿⡷⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⢸⣿⣿⠂⢻⣿⣄⣀⣸⣿⡇⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⣿⣿⠇⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⢸⣿⡶⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⢹⣿⡇⠂⢿⣧⣀⣀⣸⣿⠃⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂`,
		`⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⣀⣀⣀⣀⣀⣀⣿⣿⣀⣤⣤⣤⣶⣶⣾⣿⣿⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⣸⣿⠇⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⢸⣿⡟⠂⠈⠛⠿⠿⠟⠋⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⢀⣀⣀⣀⣀⣀⣀⣀⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⢀⣀⣀⣀⣀⣀⣀⣿⣿⣠⣤⣤⣤⣶⣶⣾⣿⣿⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⣼⣿⠇⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⢸⣿⡇⠂⠈⠛⠿⠿⠟⠁⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⢀⣀⣀⣀⣀⣀⣀⣀⠂⠂⠂⠂⠂⠂⠂⠂⠂`,
		`⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠻⠿⠿⠿⠿⢿⣿⣿⠛⠛⠛⠉⠉⢉⠉⠁⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⣿⣿⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⢸⣿⣇⣀⣀⣀⣀⣤⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⣀⣀⣠⣤⣶⣶⣿⣿⠿⠿⠟⠛⠻⠿⢿⣿⣶⣄⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠈⠿⠿⠿⠿⠿⠿⣿⡿⠛⠛⠛⠉⠉⠉⠉⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⣿⣿⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⢸⣿⣇⣀⣀⣀⣠⣤⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⣀⣀⣠⣤⣶⣾⣿⣿⠿⠿⠟⠛⠻⠿⢿⣿⣦⣀⠂⠂⠂⠂⠂⠂`,
		`⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⢸⣿⡏⠂⠂⠂⠂⠂⣿⣿⡆⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⢸⣿⡇⠂⠂⠂⠂⠂⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠿⠿⠟⠛⠂⠂⠂⠂⠂⢤⣴⣶⣾⣿⣿⡿⠿⠛⠋⠉⠂⠂⠂⠂⠂⠂⠂⠂⠂⠈⠻⣿⣷⡀⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⢸⣿⡇⠂⠂⠂⠂⠂⣸⣷⡆⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⢸⣿⡇⠂⠂⠂⠂⠂⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⠿⠿⠟⠛⠂⠂⠂⠂⠂⣤⣴⣶⣿⣿⣿⡿⠿⠛⠋⠉⠂⠂⠂⠂⠂⠂⠂⠂⠂⠈⠻⣿⣧⡀⠂⠂⠂⠂`,
		`⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⢸⣿⣇⣠⣤⣤⣤⣤⣿⣿⣥⣤⣄⡀⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⣸⣿⠃⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⢸⣿⣧⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠈⠻⠛⠉⠁⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠘⣿⣷⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⢸⣿⣇⣠⣤⣤⣤⣤⣿⣿⣤⣤⣄⡀⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⣸⣿⠃⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⢸⣿⡇⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠈⠻⠛⠉⠁⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⢹⣿⣧⠂⠂⠂⠂`,
		`⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⣠⣴⣾⣿⡿⠟⠛⠛⢩⣿⡿⠉⠙⠛⠿⣿⣧⡀⠂⠂⠂⠂⠂⠂⠂⣶⣶⣶⣶⣶⣶⣶⣶⣶⣶⣶⣶⣶⣶⣶⣶⣶⣶⣶⣶⣶⣶⣶⣶⡄⠂⠂⠂⠂⠂⠂⣿⣿⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⢸⣿⣿⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⣿⣿⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⢀⣠⣴⣾⣿⡿⠟⠛⠋⣩⣿⡟⠉⠙⠛⠿⣿⣶⡄⠂⠂⠂⠂⠂⠂⠂⠂⣿⣿⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⢸⣿⡇⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⢸⣿⣿⠂⠂⠂⠂`,
		`⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⢀⣴⣿⡿⠋⢸⣿⡇⠂⠂⣰⣿⡟⠂⠂⠂⠂⠂⠈⢻⣿⡄⠂⠂⠂⠂⠂⠂⠘⠛⠋⠉⠉⠉⠉⠉⠉⠉⠉⠉⠉⠉⠉⠉⠉⠉⠉⠉⠉⠉⠉⠉⠁⠂⠂⠂⠂⠂⠂⣿⣿⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⢸⣿⣿⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⢠⣿⡿⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⢀⣴⣿⡿⠋⢸⣿⡇⠂⠂⣴⣿⡟⠂⠂⠂⠂⠂⠈⢿⣿⡄⠂⠂⠂⠂⠂⠂⠂⣿⣿⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⢸⣿⡇⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⣸⣿⡿⠂⠂⠂⠂`,
		`⠂⠂⠂⠂⠂⠂⠂⠂⠂⣰⣿⡿⠋⠂⠂⢸⣿⣇⢀⣼⣿⠏⠂⠂⠂⠂⠂⠂⠂⠈⣿⣿⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⣿⣿⠂⢠⣤⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⢸⣿⣿⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⣰⣿⡿⠃⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⣴⣿⠟⠋⠂⠂⠘⣿⡇⢀⣾⣿⠏⠂⠂⠂⠂⠂⠂⠂⢸⣿⣇⠂⠂⠂⠂⠂⠂⠂⣿⣿⠂⣰⣄⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⢸⣿⡇⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⣰⣿⡿⠃⠂⠂⠂⠂`,
		`⠂⠂⠂⠂⠂⠂⠂⠂⣰⣿⠏⠂⠂⠂⠂⠂⣿⣿⣾⡿⠃⠂⠂⠂⠂⠂⠂⠂⠂⢀⣿⡿⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⣿⣿⢠⣿⡿⠁⠂⠂⢀⣤⣶⣶⣶⣶⣶⣾⣿⣿⣄⡀⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⢀⣠⣴⣾⣿⠟⠁⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⣼⣿⡏⠂⠂⠂⠂⠂⣿⣷⣿⠟⠁⠂⠂⠂⠂⠂⠂⠂⠂⢸⣿⡏⠂⠂⠂⠂⠂⠂⠂⣿⣿⣰⣿⡏⠂⠂⠂⣠⣴⣶⣶⣶⣶⣶⣾⣿⣧⣄⡀⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⢀⣠⣴⣾⣿⠟⠁⠂⠂⠂⠂⠂`,
		`⠂⠂⠂⠂⠂⠂⠂⠂⣿⣿⠂⠂⠂⠂⣠⣴⣿⣿⡏⠂⠂⠂⠂⠂⠂⠂⠂⠂⢠⣾⣿⠃⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⣿⣿⣾⡿⠁⠂⠂⢰⣿⡟⠉⠁⠂⠂⠉⢹⣿⣿⠿⣿⣷⣦⡀⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⢀⣀⣠⣤⣴⣾⣿⡿⠟⠋⠁⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⣿⣿⠂⠂⠂⠂⣠⣴⣿⣿⡇⠂⠂⠂⠂⠂⠂⠂⠂⠂⢠⣿⣿⠃⠂⠂⠂⠂⠂⠂⠂⣿⣿⣿⡿⠂⠂⠂⢰⣿⡟⠉⠂⠂⠈⠉⢹⣿⡟⠿⣿⣷⣤⡀⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⢀⣀⣠⣤⣶⣾⣿⠿⠟⠋⠂⠂⠂⠂⠂⠂⠂⠂`,
		`⠂⠂⠂⠂⠂⠂⠂⠂⢿⣿⣶⣶⣶⣿⠿⠋⠈⠿⠟⠂⠂⠂⠂⠂⠂⣀⣤⣾⣿⡟⠁⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⢹⣿⣿⠃⠂⠂⠂⠘⣿⣷⣤⣤⣀⣤⣤⣾⣿⠏⠂⠂⠙⢿⣿⡆⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠘⢿⣿⠿⠿⠛⠛⠉⠁⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⢿⣿⣶⣶⣶⣿⠿⠋⠘⠿⠟⠂⠂⠂⠂⠂⠂⣀⣴⣶⣿⠟⠁⠂⠂⠂⠂⠂⠂⠂⠂⢹⣿⣿⠃⠂⠂⠂⠘⣿⣷⣤⣤⣀⣤⣴⣿⡿⠁⠂⠈⠙⢿⣿⠆⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠘⢿⡿⠿⠿⠛⠋⠉⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂`,
		`⠂⠂⠂⠂⠂⠂⠂⠂⠂⠉⠙⠋⠉⠂⠂⠂⠂⠂⠂⠂⠂⣤⣶⣾⣿⠿⠟⠋⠁⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠈⠿⠿⠂⠂⠂⠂⠂⠈⠙⠛⠛⠛⠛⠛⠋⠁⠂⠂⠂⠂⠂⠈⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠉⠙⠋⠉⠂⠂⠂⠂⠂⠂⠂⠠⣤⣶⣾⣿⠿⠟⠋⠁⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠈⠿⠿⠂⠂⠂⠂⠂⠈⠙⠛⠛⠛⠛⠛⠋⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂`,
		`⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠈⠉⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠈⠉⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂`,
		`⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂`,
	}

	var offset int
	var termWidth int
	var termHeight int
	for {
		// Move cursor to top left
		fmt.Print("\033[H")

		w, h, err := term.GetSize(int(os.Stdout.Fd()))
		if err != nil {
			fmt.Println("Failed to get terminal size:", err)
			return
		}

		// Erase screen if terminal size changed
		if termWidth != w || termHeight != h {
			fmt.Print("\033[2J")
			termWidth = w
			termHeight = h
		}

		for _, line := range apt {
			runes := []rune(line)

			beginIndex := offset % len(runes)
			endIndex := (offset + termWidth) % len(runes)

			if beginIndex < endIndex {
				fmt.Println(string(runes[beginIndex:endIndex]))
			} else {
				// Fold back if the string to be displayed exceeds the end of the line
				fmt.Println(string(append(runes[beginIndex:], runes[:endIndex]...)))
			}
		}

		for _, line := range apt {
			runes := []rune(line)

			len := len(runes)
			inverseOffset := len - offset%len
			beginIndex := inverseOffset % len
			endIndex := (inverseOffset + termWidth) % len

			if beginIndex < endIndex {
				fmt.Println(string(runes[beginIndex:endIndex]))
			} else {
				// Fold back if the string to be displayed exceeds the end of the line
				fmt.Println(string(append(runes[beginIndex:], runes[:endIndex]...)))
			}
		}

		offset++

		time.Sleep(20 * time.Millisecond)
	}
}
